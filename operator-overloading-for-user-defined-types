class Complex {
  double re,im;
  
public:
  Complex(double a=0.0, double b=0.0) : 
    re(a), im(b) {}
  ~Complex() {}
  void display();
  Complex operator+(const Complex &c) {   //  it is actually read by the compiler as --- Complex(this, const Complex &c)
    Complex r;
    r.re = re + c.re;
    r.im = im + c.im;
    return r;
  }
};

int main() {
  Complex c1(4.5, 6.7), c2(1.5,7.4), c3;
  c3 = c1 + c2;   /// it is read as --- c1.operator+(c2)
  return 0;
}

------------------------------------------------------------------
Extending operator+ with member function

class Complex {
  double re,im;
  
public:
  Complex(double a=0.0, double b=0.0) : 
    re(a), im(b) {}
  ~Complex() {}
  void display();
  Complex operator+(const Complex &c) {   //  it is actually read by the compiler as --- Complex(this, const Complex &c)
    Complex r;
    r.re = re + c.re;
    r.im = im + c.im;
    return r;
  }
  
  Complex operator+(double d) {
    Complex b(d);
    return *this + b; /// using the operator+ defined in line 34
  }
};

d3 = d1 + d2;
d2 = d1 + 4.2;
//// d2 = 4.2 + d1; /// not possible with above implementation as left operator should always be this pointer

---------------------------------------------------------------------------------------------------------------------------------------------
/// To solve the above problem we will use the friend function, a friend function will have the access to all the private members of the class

class Complex {
  double re,im;
  explicit Complex(double a=0.0, double b=0.0) : 
    re(a), im(b) {}
  ~Complex() {}
  void display();
  friend Complex operator+(const Complex &a, const Complex &b) {   //  it is actually read by the compiler as --- Complex(this, const Complex &c)
    Complex r;
    r.re = a.re + b.re;
    r.im = a.im + b.im;
    return r;
  }
  
  friend Complex operator+(const Complex &a, double d) {
    Complex b(d);
    return a + b; /// using the operator+ defined in line 34
  }
  
  friend Complex operator+(double d, const Complex &b) {
    Complex a(d);
    return a + b; /// using the operator+ defined in line 34
  }
};

d3 = d1 + d2;
d2 = d1 + 4.2;
d2 = 4.2 + d1;
